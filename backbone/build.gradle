apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

final SUPPORT_LIBRARY_VERSION = '26.1.0'
final RX_VERSION = '0.4.0'

version = rootProject.ext.applicationVersionName

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode rootProject.ext.applicationVersionCode
        versionName version
        multiDexEnabled true
        ndk.abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }


    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    resourcePrefix 'rsb_'
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

ext {
    bintrayRepo = 'ResearchStack'
    bintrayName = 'Backbone'

    publishedGroupId = 'org.researchstack'
    libraryName = 'Backbone'
    artifact = 'backbone'

    libraryDescription = 'Backbone description'

    siteUrl = 'https://researchstack.org'
    gitUrl = 'https://github.com/ResearchStack/ResearchStack.git'

    libraryVersion = version

    userOrgName = 'researchstack'
    developerId = properties.getProperty("bintray.user")
    developerName = properties.getProperty("bintray.developerName")
    developerEmail = properties.getProperty("bintray.developerEmail")

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:preference-v14:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    implementation 'com.google.code.gson:gson:2.4'
    implementation 'io.reactivex:rxjava:1.2.5'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation "com.jakewharton.rxbinding:rxbinding:$RX_VERSION"
    implementation "com.jakewharton.rxbinding:rxbinding-support-v4:$RX_VERSION"
    implementation "com.jakewharton.rxbinding:rxbinding-appcompat-v7:$RX_VERSION"
    implementation "com.jakewharton.rxbinding:rxbinding-design:$RX_VERSION"
    implementation 'com.github.PhilJay:MPAndroidChart:v2.2.3'
    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.scottyab:aes-crypto:0.0.3'
    implementation 'co.touchlab.squeaky:squeaky-query:0.5.0.0'
    annotationProcessor 'co.touchlab.squeaky:squeaky-processor:0.5.0.0'
    implementation 'net.zetetic:android-database-sqlcipher:4.2.0@aar'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.0'
    testImplementation 'org.mockito:mockito-core:1.10.19'
}

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.srcDirs
    }

    afterEvaluate {
        javadoc.classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        javadoc.classpath += files(android.libraryVariants.collect { variant ->
            variant.javaCompile.classpath.files
        })
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = userOrgName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
    }
}

publishing {
    publications {
        researchStack(MavenPublication) {
            groupId "org.researchstack"
            artifactId "backbone"
            version version
            artifact("$buildDir/outputs/aar/backbone-release.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username artifactoryUser
                password artifactoryPassword
            }
            url "https://artifactory.chorus.se/artifactory/opensource"
        }
    }
}
